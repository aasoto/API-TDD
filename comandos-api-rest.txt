/*-------------------- CREACIÓN DE UNA API REST CON LARAVEL -------------------------*/
//crear proyecto en LARAVEL
composer create-project laravel/laravel api-tdd

//crear base de datos y escribir nombre de esta en el archivo .env
//crear todas las migraciones necesarias
php artisan make:migration create_employee_table

//ejecutar las migraciones
php artisan migrate

//crear los controladores con su tipo y modelos respectivos
php artisan make:controller EmployeeController --model Employee --api

/*--- LARAVEL BREEZE (Autenticación) ---*/
//instalar Laravel Breeze
composer require laravel/breeze --dev

//Este comando publica las vistas, rutas y controladores de la autenticación para que se puede tener un control completo de los componentes y la implementación.
php artisan breeze:install              //instalación normal
php artisan breeze:install --dark       //instalación con modo oscuro

//compilar la instalación de brezee
php artisan migrate
npm install
npm run dev

/*--- LARAVEL SANCTUM ---*/
//SPA Authentication

1. Configuración de dominios.
//Buscar el archivo config/sanctum.php y colocar el dominio en la lista de dominios
separados por comas, aquí está configurado por defecto el puerto del servidor de PHP
127.0.0.1:8000

2. Sanctum Middleware.
//Buscar el archivo app/Http/Kernel.php y en la sesión y 'api' descomentar la linea de:
\Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,

3.CORS & Cookies
//Para habilitar el uso de la cookies se debe abrir el archivo config/cors.php y cambiar el 'supports_credentials' a true.
//Despues se debe habilitar en el archivo resources/js/bootstrap.js la opción de axios llamada withCredentials pegando la siguiente línea de código:
axios.defaults.withCredentials = true;
//Finalimente si es necesario configurar algún subdominio se debe hacer con el archivo config/session.php
'domain' => '.domain.com',

4. Verficar.
//Para verficar si la ruta está protegida pegar el siguiente comando en la consola del navegador web y probar con la sesión iniciada y cerrada.
axios.get('/api/employee/all').then(response => {
    console.log(response);
});

/*--- FACTORIES ---*/
//en caso de necesitarse factories crearlos
php artisan make:factory EmployeeFactory

//declarar los factories en el archivo que se encuentra en vendor\laravel\framework\src\Illuminate\Database\Eloquent\Factories\HasFactory

//para cambiar el generador de imagenes editar el archivo
vendor/fakerphp/faker/src/Faker/Provider/Image.php
//despues cambiar la BASE_URL, borrar la anterior y colocar la siguiente
https://placehold.jp/

/*--- SEEDERS ---*/
//luego crear los seeders para tener data de prueba
php artisan make:seeder EmployeeSeeder

//invocar el seeder en el DatabaseSeeder
$this->call(EmployeeSeeder::class);

//ejecutar los seeders con el comando
php artisan db:seed

/*--- REQUESTS ---*/
//crear request para validar la información en métodos de guardar y actualizar
php artisan make:request Employee/StoreRequest

//configurar las reglas de validación y luego definir la funcion failedValidation
    function failedValidation(Validator $validator)
    {
        if ($this->expectsJson()) {
            $response = new Response($validator->errors(), 422);
            throw new ValidationException($validator, $response);
        }
    }

/*--- POSTMAN ---*/
//probar los métodos en postman
//STORE: para este método se necesita crear un formulario tipo form-data y checkear application/json y despues llenar todos los campos deacuerdo a los nombres que se encuentren en los campos de la base de datos.
Body: form-data
headers: Accept application/json

//UPDATE:
Body: x-www-form-urlencoded
headers: Accept application/json
