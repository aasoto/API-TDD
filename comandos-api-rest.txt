/*-------------------- CREACIÓN DE UNA API REST CON LARAVEL -------------------------*/
//crear proyecto en LARAVEL
composer create-project laravel/laravel api-tdd

//crear base de datos y escribir nombre de esta en el archivo .env
//crear todas las migraciones necesarias
php artisan make:migration create_employee_table

//ejecutar las migraciones
php artisan migrate

//crear los controladores con su tipo y modelos respectivos
php artisan make:controller EmployeeController --model Employee --api

//LARAVEL BREEZE (Autenticación)
//instalar Laravel Breeze
composer require laravel/breeze --dev

//Este comando publica las vistas, rutas y controladores de la autenticación para que se puede tener un control completo de los componentes y la implementación.
php artisan breeze:install              //instalación normal
php artisan breeze:install --dark       //instalación con modo oscuro

//compilar la instalación de brezee
php artisan migrate
npm install
npm run dev

/*--- FACTORIES ---*/
//en caso de necesitarse factories crearlos
php artisan make:factory EmployeeFactory

//declarar los factories en el archivo que se encuentra en vendor\laravel\framework\src\Illuminate\Database\Eloquent\Factories\HasFactory

//para cambiar el generador de imagenes editar el archivo
vendor/fakerphp/faker/src/Faker/Provider/Image.php
//despues cambiar la BASE_URL, borrar la anterior y colocar la siguiente
https://placehold.jp/

/*--- SEEDERS ---*/
//luego crear los seeders para tener data de prueba
php artisan make:seeder EmployeeSeeder

//invocar el seeder en el DatabaseSeeder
$this->call(EmployeeSeeder::class);

//ejecutar los seeders con el comando
php artisan db:seed

/*--- REQUESTS ---*/
//crear request para validar la información en métodos de guardar y actualizar
php artisan make:request Employee/StoreRequest

//configurar las reglas de validación y luego definir la funcion failedValidation
    function failedValidation(Validator $validator)
    {
        if ($this->expectsJson()) {
            $response = new Response($validator->errors(), 422);
            throw new ValidationException($validator, $response);
        }
    }

/*--- POSTMAN ---*/
//probar los métodos en postman
//STORE: para este método se necesita crear un formulario tipo form-data y checkear application/json y despues llenar todos los campos deacuerdo a los nombres que se encuentren en los campos de la base de datos.
Body: form-data
headers: Accept application/json

//UPDATE:
Body: x-www-form-urlencoded
headers: Accept application/json
